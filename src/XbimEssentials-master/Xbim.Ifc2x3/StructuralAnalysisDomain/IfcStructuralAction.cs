// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.StructuralAnalysisDomain;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcStructuralAction
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcStructuralAction : IIfcStructuralActivity
	{
		bool @DestabilizingLoad { get;  set; }
		IIfcStructuralReaction @CausedBy { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.StructuralAnalysisDomain
{
	[ExpressType("IfcStructuralAction", 40)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcStructuralAction : IfcStructuralActivity, IIfcStructuralAction, IEquatable<@IfcStructuralAction>
	{
		#region IIfcStructuralAction explicit implementation
		bool IIfcStructuralAction.DestabilizingLoad { 
 
			get { return @DestabilizingLoad; } 
			set { DestabilizingLoad = value;}
		}	
		IIfcStructuralReaction IIfcStructuralAction.CausedBy { 
 
 
			get { return @CausedBy; } 
			set { CausedBy = value as IfcStructuralReaction;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcStructuralAction(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private bool _destabilizingLoad;
		private IfcStructuralReaction _causedBy;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(10, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 17)]
		public bool @DestabilizingLoad 
		{ 
			get 
			{
				if(_activated) return _destabilizingLoad;
				Activate();
				return _destabilizingLoad;
			} 
			set
			{
				SetValue( v =>  _destabilizingLoad = v, _destabilizingLoad, value,  "DestabilizingLoad", 10);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 18)]
		public IfcStructuralReaction @CausedBy 
		{ 
			get 
			{
				if(_activated) return _causedBy;
				Activate();
				return _causedBy;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _causedBy = v, _causedBy, value,  "CausedBy", 11);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 9: 
					_destabilizingLoad = value.BooleanVal;
					return;
				case 10: 
					_causedBy = (IfcStructuralReaction)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcStructuralAction other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}