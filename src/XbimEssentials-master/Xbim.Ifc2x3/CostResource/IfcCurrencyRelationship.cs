// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.DateTimeResource;
using Xbim.Ifc2x3.ExternalReferenceResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.CostResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcCurrencyRelationship
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcCurrencyRelationship : IPersistEntity
	{
		IIfcMonetaryUnit @RelatingMonetaryUnit { get;  set; }
		IIfcMonetaryUnit @RelatedMonetaryUnit { get;  set; }
		IfcPositiveRatioMeasure @ExchangeRate { get;  set; }
		IIfcDateAndTime @RateDateTime { get;  set; }
		IIfcLibraryInformation @RateSource { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.CostResource
{
	[ExpressType("IfcCurrencyRelationship", 195)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcCurrencyRelationship : PersistEntity, IInstantiableEntity, IIfcCurrencyRelationship, IContainsEntityReferences, IEquatable<@IfcCurrencyRelationship>
	{
		#region IIfcCurrencyRelationship explicit implementation
		IIfcMonetaryUnit IIfcCurrencyRelationship.RelatingMonetaryUnit { 
 
 
			get { return @RelatingMonetaryUnit; } 
			set { RelatingMonetaryUnit = value as IfcMonetaryUnit;}
		}	
		IIfcMonetaryUnit IIfcCurrencyRelationship.RelatedMonetaryUnit { 
 
 
			get { return @RelatedMonetaryUnit; } 
			set { RelatedMonetaryUnit = value as IfcMonetaryUnit;}
		}	
		IfcPositiveRatioMeasure IIfcCurrencyRelationship.ExchangeRate { 
 
			get { return @ExchangeRate; } 
			set { ExchangeRate = value;}
		}	
		IIfcDateAndTime IIfcCurrencyRelationship.RateDateTime { 
 
 
			get { return @RateDateTime; } 
			set { RateDateTime = value as IfcDateAndTime;}
		}	
		IIfcLibraryInformation IIfcCurrencyRelationship.RateSource { 
 
 
			get { return @RateSource; } 
			set { RateSource = value as IfcLibraryInformation;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcCurrencyRelationship(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcMonetaryUnit _relatingMonetaryUnit;
		private IfcMonetaryUnit _relatedMonetaryUnit;
		private IfcPositiveRatioMeasure _exchangeRate;
		private IfcDateAndTime _rateDateTime;
		private IfcLibraryInformation _rateSource;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 1)]
		public IfcMonetaryUnit @RelatingMonetaryUnit 
		{ 
			get 
			{
				if(_activated) return _relatingMonetaryUnit;
				Activate();
				return _relatingMonetaryUnit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _relatingMonetaryUnit = v, _relatingMonetaryUnit, value,  "RelatingMonetaryUnit", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 2)]
		public IfcMonetaryUnit @RelatedMonetaryUnit 
		{ 
			get 
			{
				if(_activated) return _relatedMonetaryUnit;
				Activate();
				return _relatedMonetaryUnit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _relatedMonetaryUnit = v, _relatedMonetaryUnit, value,  "RelatedMonetaryUnit", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcPositiveRatioMeasure @ExchangeRate 
		{ 
			get 
			{
				if(_activated) return _exchangeRate;
				Activate();
				return _exchangeRate;
			} 
			set
			{
				SetValue( v =>  _exchangeRate = v, _exchangeRate, value,  "ExchangeRate", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 4)]
		public IfcDateAndTime @RateDateTime 
		{ 
			get 
			{
				if(_activated) return _rateDateTime;
				Activate();
				return _rateDateTime;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _rateDateTime = v, _rateDateTime, value,  "RateDateTime", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 5)]
		public IfcLibraryInformation @RateSource 
		{ 
			get 
			{
				if(_activated) return _rateSource;
				Activate();
				return _rateSource;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _rateSource = v, _rateSource, value,  "RateSource", 5);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_relatingMonetaryUnit = (IfcMonetaryUnit)(value.EntityVal);
					return;
				case 1: 
					_relatedMonetaryUnit = (IfcMonetaryUnit)(value.EntityVal);
					return;
				case 2: 
					_exchangeRate = value.RealVal;
					return;
				case 3: 
					_rateDateTime = (IfcDateAndTime)(value.EntityVal);
					return;
				case 4: 
					_rateSource = (IfcLibraryInformation)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcCurrencyRelationship other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@RelatingMonetaryUnit != null)
					yield return @RelatingMonetaryUnit;
				if (@RelatedMonetaryUnit != null)
					yield return @RelatedMonetaryUnit;
				if (@RateDateTime != null)
					yield return @RateDateTime;
				if (@RateSource != null)
					yield return @RateSource;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}