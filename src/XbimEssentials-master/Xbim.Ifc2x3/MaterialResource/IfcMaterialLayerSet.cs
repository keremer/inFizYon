// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.MaterialResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcMaterialLayerSet
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcMaterialLayerSet : IPersistEntity, IfcMaterialSelect
	{
		IItemSet<IIfcMaterialLayer> @MaterialLayers { get; }
		IfcLabel? @LayerSetName { get;  set; }
		IfcLengthMeasure @TotalThickness  { get ; }
	
	}
}

namespace Xbim.Ifc2x3.MaterialResource
{
	[ExpressType("IfcMaterialLayerSet", 205)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcMaterialLayerSet : PersistEntity, IInstantiableEntity, IIfcMaterialLayerSet, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@IfcMaterialLayerSet>
	{
		#region IIfcMaterialLayerSet explicit implementation
		IItemSet<IIfcMaterialLayer> IIfcMaterialLayerSet.MaterialLayers { 
			get { return new Common.Collections.ProxyItemSet<IfcMaterialLayer, IIfcMaterialLayer>( @MaterialLayers); } 
		}	
		IfcLabel? IIfcMaterialLayerSet.LayerSetName { 
 
			get { return @LayerSetName; } 
			set { LayerSetName = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMaterialLayerSet(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_materialLayers = new ItemSet<IfcMaterialLayer>( this, 0,  1);
		}

		#region Explicit attribute fields
		private readonly ItemSet<IfcMaterialLayer> _materialLayers;
		private IfcLabel? _layerSetName;
		#endregion
	
		#region Explicit attribute properties
		[IndexedProperty]
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.List, EntityAttributeType.Class, 1, -1, 1)]
		public IItemSet<IfcMaterialLayer> @MaterialLayers 
		{ 
			get 
			{
				if(_activated) return _materialLayers;
				Activate();
				return _materialLayers;
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcLabel? @LayerSetName 
		{ 
			get 
			{
				if(_activated) return _layerSetName;
				Activate();
				return _layerSetName;
			} 
			set
			{
				SetValue( v =>  _layerSetName = v, _layerSetName, value,  "LayerSetName", 2);
			} 
		}	
		#endregion


		#region Derived attributes
		[EntityAttribute(0, EntityAttributeState.Derived, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 0)]
		public IfcLengthMeasure @TotalThickness 
		{
			get 
			{
				//## Getter for TotalThickness
			    return MaterialLayers.Aggregate(0d, (i, layer) => i + layer.LayerThickness);
			    //##
			}
		}

		#endregion


		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_materialLayers.InternalAdd((IfcMaterialLayer)value.EntityVal);
					return;
				case 1: 
					_layerSetName = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcMaterialLayerSet other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				foreach(var entity in @MaterialLayers)
					yield return entity;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				foreach(var entity in @MaterialLayers)
					yield return entity;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}