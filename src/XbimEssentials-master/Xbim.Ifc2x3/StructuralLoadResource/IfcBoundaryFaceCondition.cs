// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.StructuralLoadResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcBoundaryFaceCondition
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcBoundaryFaceCondition : IIfcBoundaryCondition
	{
		IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaX { get;  set; }
		IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaY { get;  set; }
		IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaZ { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.StructuralLoadResource
{
	[ExpressType("IfcBoundaryFaceCondition", 674)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcBoundaryFaceCondition : IfcBoundaryCondition, IInstantiableEntity, IIfcBoundaryFaceCondition, IEquatable<@IfcBoundaryFaceCondition>
	{
		#region IIfcBoundaryFaceCondition explicit implementation
		IfcModulusOfSubgradeReactionMeasure? IIfcBoundaryFaceCondition.LinearStiffnessByAreaX { 
 
			get { return @LinearStiffnessByAreaX; } 
			set { LinearStiffnessByAreaX = value;}
		}	
		IfcModulusOfSubgradeReactionMeasure? IIfcBoundaryFaceCondition.LinearStiffnessByAreaY { 
 
			get { return @LinearStiffnessByAreaY; } 
			set { LinearStiffnessByAreaY = value;}
		}	
		IfcModulusOfSubgradeReactionMeasure? IIfcBoundaryFaceCondition.LinearStiffnessByAreaZ { 
 
			get { return @LinearStiffnessByAreaZ; } 
			set { LinearStiffnessByAreaZ = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBoundaryFaceCondition(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcModulusOfSubgradeReactionMeasure? _linearStiffnessByAreaX;
		private IfcModulusOfSubgradeReactionMeasure? _linearStiffnessByAreaY;
		private IfcModulusOfSubgradeReactionMeasure? _linearStiffnessByAreaZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaX 
		{ 
			get 
			{
				if(_activated) return _linearStiffnessByAreaX;
				Activate();
				return _linearStiffnessByAreaX;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByAreaX = v, _linearStiffnessByAreaX, value,  "LinearStiffnessByAreaX", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaY 
		{ 
			get 
			{
				if(_activated) return _linearStiffnessByAreaY;
				Activate();
				return _linearStiffnessByAreaY;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByAreaY = v, _linearStiffnessByAreaY, value,  "LinearStiffnessByAreaY", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 4)]
		public IfcModulusOfSubgradeReactionMeasure? @LinearStiffnessByAreaZ 
		{ 
			get 
			{
				if(_activated) return _linearStiffnessByAreaZ;
				Activate();
				return _linearStiffnessByAreaZ;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessByAreaZ = v, _linearStiffnessByAreaZ, value,  "LinearStiffnessByAreaZ", 4);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 1: 
					_linearStiffnessByAreaX = value.RealVal;
					return;
				case 2: 
					_linearStiffnessByAreaY = value.RealVal;
					return;
				case 3: 
					_linearStiffnessByAreaZ = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcBoundaryFaceCondition other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}