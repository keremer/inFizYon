// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.StructuralLoadResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcBoundaryNodeCondition
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcBoundaryNodeCondition : IIfcBoundaryCondition
	{
		IfcLinearStiffnessMeasure? @LinearStiffnessX { get;  set; }
		IfcLinearStiffnessMeasure? @LinearStiffnessY { get;  set; }
		IfcLinearStiffnessMeasure? @LinearStiffnessZ { get;  set; }
		IfcRotationalStiffnessMeasure? @RotationalStiffnessX { get;  set; }
		IfcRotationalStiffnessMeasure? @RotationalStiffnessY { get;  set; }
		IfcRotationalStiffnessMeasure? @RotationalStiffnessZ { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.StructuralLoadResource
{
	[ExpressType("IfcBoundaryNodeCondition", 394)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcBoundaryNodeCondition : IfcBoundaryCondition, IInstantiableEntity, IIfcBoundaryNodeCondition, IEquatable<@IfcBoundaryNodeCondition>
	{
		#region IIfcBoundaryNodeCondition explicit implementation
		IfcLinearStiffnessMeasure? IIfcBoundaryNodeCondition.LinearStiffnessX { 
 
			get { return @LinearStiffnessX; } 
			set { LinearStiffnessX = value;}
		}	
		IfcLinearStiffnessMeasure? IIfcBoundaryNodeCondition.LinearStiffnessY { 
 
			get { return @LinearStiffnessY; } 
			set { LinearStiffnessY = value;}
		}	
		IfcLinearStiffnessMeasure? IIfcBoundaryNodeCondition.LinearStiffnessZ { 
 
			get { return @LinearStiffnessZ; } 
			set { LinearStiffnessZ = value;}
		}	
		IfcRotationalStiffnessMeasure? IIfcBoundaryNodeCondition.RotationalStiffnessX { 
 
			get { return @RotationalStiffnessX; } 
			set { RotationalStiffnessX = value;}
		}	
		IfcRotationalStiffnessMeasure? IIfcBoundaryNodeCondition.RotationalStiffnessY { 
 
			get { return @RotationalStiffnessY; } 
			set { RotationalStiffnessY = value;}
		}	
		IfcRotationalStiffnessMeasure? IIfcBoundaryNodeCondition.RotationalStiffnessZ { 
 
			get { return @RotationalStiffnessZ; } 
			set { RotationalStiffnessZ = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcBoundaryNodeCondition(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcLinearStiffnessMeasure? _linearStiffnessX;
		private IfcLinearStiffnessMeasure? _linearStiffnessY;
		private IfcLinearStiffnessMeasure? _linearStiffnessZ;
		private IfcRotationalStiffnessMeasure? _rotationalStiffnessX;
		private IfcRotationalStiffnessMeasure? _rotationalStiffnessY;
		private IfcRotationalStiffnessMeasure? _rotationalStiffnessZ;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcLinearStiffnessMeasure? @LinearStiffnessX 
		{ 
			get 
			{
				if(_activated) return _linearStiffnessX;
				Activate();
				return _linearStiffnessX;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessX = v, _linearStiffnessX, value,  "LinearStiffnessX", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcLinearStiffnessMeasure? @LinearStiffnessY 
		{ 
			get 
			{
				if(_activated) return _linearStiffnessY;
				Activate();
				return _linearStiffnessY;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessY = v, _linearStiffnessY, value,  "LinearStiffnessY", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 4)]
		public IfcLinearStiffnessMeasure? @LinearStiffnessZ 
		{ 
			get 
			{
				if(_activated) return _linearStiffnessZ;
				Activate();
				return _linearStiffnessZ;
			} 
			set
			{
				SetValue( v =>  _linearStiffnessZ = v, _linearStiffnessZ, value,  "LinearStiffnessZ", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 5)]
		public IfcRotationalStiffnessMeasure? @RotationalStiffnessX 
		{ 
			get 
			{
				if(_activated) return _rotationalStiffnessX;
				Activate();
				return _rotationalStiffnessX;
			} 
			set
			{
				SetValue( v =>  _rotationalStiffnessX = v, _rotationalStiffnessX, value,  "RotationalStiffnessX", 5);
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public IfcRotationalStiffnessMeasure? @RotationalStiffnessY 
		{ 
			get 
			{
				if(_activated) return _rotationalStiffnessY;
				Activate();
				return _rotationalStiffnessY;
			} 
			set
			{
				SetValue( v =>  _rotationalStiffnessY = v, _rotationalStiffnessY, value,  "RotationalStiffnessY", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 7)]
		public IfcRotationalStiffnessMeasure? @RotationalStiffnessZ 
		{ 
			get 
			{
				if(_activated) return _rotationalStiffnessZ;
				Activate();
				return _rotationalStiffnessZ;
			} 
			set
			{
				SetValue( v =>  _rotationalStiffnessZ = v, _rotationalStiffnessZ, value,  "RotationalStiffnessZ", 7);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 1: 
					_linearStiffnessX = value.RealVal;
					return;
				case 2: 
					_linearStiffnessY = value.RealVal;
					return;
				case 3: 
					_linearStiffnessZ = value.RealVal;
					return;
				case 4: 
					_rotationalStiffnessX = value.RealVal;
					return;
				case 5: 
					_rotationalStiffnessY = value.RealVal;
					return;
				case 6: 
					_rotationalStiffnessZ = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcBoundaryNodeCondition other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}