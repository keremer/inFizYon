// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc2x3.ElectricalDomain
{
	public partial class @IfcTransformerType : IIfcTransformerType
	{

		[CrossSchemaAttribute(typeof(IIfcTransformerType), 10)]
		Ifc4.Interfaces.IfcTransformerTypeEnum IIfcTransformerType.PredefinedType 
		{ 
			get
			{
				//## Custom code to handle enumeration of PredefinedType
				//##
				switch (PredefinedType)
				{
					case IfcTransformerTypeEnum.CURRENT:
						return Ifc4.Interfaces.IfcTransformerTypeEnum.CURRENT;
					case IfcTransformerTypeEnum.FREQUENCY:
						return Ifc4.Interfaces.IfcTransformerTypeEnum.FREQUENCY;
					case IfcTransformerTypeEnum.VOLTAGE:
						return Ifc4.Interfaces.IfcTransformerTypeEnum.VOLTAGE;
					case IfcTransformerTypeEnum.USERDEFINED:
						//## Optional custom handling of PredefinedType == .USERDEFINED. 
                        if (ElementType.HasValue)
                        {
                            Ifc4.Interfaces.IfcTransformerTypeEnum result;
                            if (System.Enum.TryParse(ElementType.Value, false, out result))
                                return result;
                        }
						//##
						return Ifc4.Interfaces.IfcTransformerTypeEnum.USERDEFINED;
					case IfcTransformerTypeEnum.NOTDEFINED:
						return Ifc4.Interfaces.IfcTransformerTypeEnum.NOTDEFINED;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of PredefinedType
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcTransformerTypeEnum.CURRENT:
						PredefinedType = IfcTransformerTypeEnum.CURRENT;
						return;
					case Ifc4.Interfaces.IfcTransformerTypeEnum.FREQUENCY:
						PredefinedType = IfcTransformerTypeEnum.FREQUENCY;
						return;
					case Ifc4.Interfaces.IfcTransformerTypeEnum.INVERTER:
						//## Handle setting of INVERTER member from IfcTransformerTypeEnum in property PredefinedType
						ElementType = value.ToString();
                        PredefinedType = IfcTransformerTypeEnum.USERDEFINED;
				        return;
						//##
										case Ifc4.Interfaces.IfcTransformerTypeEnum.RECTIFIER:
						//## Handle setting of RECTIFIER member from IfcTransformerTypeEnum in property PredefinedType
						ElementType = value.ToString();
                        PredefinedType = IfcTransformerTypeEnum.USERDEFINED;
				        return;
						//##
										case Ifc4.Interfaces.IfcTransformerTypeEnum.VOLTAGE:
						PredefinedType = IfcTransformerTypeEnum.VOLTAGE;
						return;
					case Ifc4.Interfaces.IfcTransformerTypeEnum.USERDEFINED:
						PredefinedType = IfcTransformerTypeEnum.USERDEFINED;
						return;
					case Ifc4.Interfaces.IfcTransformerTypeEnum.NOTDEFINED:
						PredefinedType = IfcTransformerTypeEnum.NOTDEFINED;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}
	//## Custom code
	//##
	}
}