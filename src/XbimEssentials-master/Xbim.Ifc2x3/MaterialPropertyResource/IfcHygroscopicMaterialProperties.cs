// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.MaterialPropertyResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcHygroscopicMaterialProperties
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcHygroscopicMaterialProperties : IIfcMaterialProperties
	{
		IfcPositiveRatioMeasure? @UpperVaporResistanceFactor { get;  set; }
		IfcPositiveRatioMeasure? @LowerVaporResistanceFactor { get;  set; }
		IfcIsothermalMoistureCapacityMeasure? @IsothermalMoistureCapacity { get;  set; }
		IfcVaporPermeabilityMeasure? @VaporPermeability { get;  set; }
		IfcMoistureDiffusivityMeasure? @MoistureDiffusivity { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.MaterialPropertyResource
{
	[ExpressType("IfcHygroscopicMaterialProperties", 717)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcHygroscopicMaterialProperties : IfcMaterialProperties, IInstantiableEntity, IIfcHygroscopicMaterialProperties, IContainsEntityReferences, IEquatable<@IfcHygroscopicMaterialProperties>
	{
		#region IIfcHygroscopicMaterialProperties explicit implementation
		IfcPositiveRatioMeasure? IIfcHygroscopicMaterialProperties.UpperVaporResistanceFactor { 
 
			get { return @UpperVaporResistanceFactor; } 
			set { UpperVaporResistanceFactor = value;}
		}	
		IfcPositiveRatioMeasure? IIfcHygroscopicMaterialProperties.LowerVaporResistanceFactor { 
 
			get { return @LowerVaporResistanceFactor; } 
			set { LowerVaporResistanceFactor = value;}
		}	
		IfcIsothermalMoistureCapacityMeasure? IIfcHygroscopicMaterialProperties.IsothermalMoistureCapacity { 
 
			get { return @IsothermalMoistureCapacity; } 
			set { IsothermalMoistureCapacity = value;}
		}	
		IfcVaporPermeabilityMeasure? IIfcHygroscopicMaterialProperties.VaporPermeability { 
 
			get { return @VaporPermeability; } 
			set { VaporPermeability = value;}
		}	
		IfcMoistureDiffusivityMeasure? IIfcHygroscopicMaterialProperties.MoistureDiffusivity { 
 
			get { return @MoistureDiffusivity; } 
			set { MoistureDiffusivity = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcHygroscopicMaterialProperties(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcPositiveRatioMeasure? _upperVaporResistanceFactor;
		private IfcPositiveRatioMeasure? _lowerVaporResistanceFactor;
		private IfcIsothermalMoistureCapacityMeasure? _isothermalMoistureCapacity;
		private IfcVaporPermeabilityMeasure? _vaporPermeability;
		private IfcMoistureDiffusivityMeasure? _moistureDiffusivity;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcPositiveRatioMeasure? @UpperVaporResistanceFactor 
		{ 
			get 
			{
				if(_activated) return _upperVaporResistanceFactor;
				Activate();
				return _upperVaporResistanceFactor;
			} 
			set
			{
				SetValue( v =>  _upperVaporResistanceFactor = v, _upperVaporResistanceFactor, value,  "UpperVaporResistanceFactor", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcPositiveRatioMeasure? @LowerVaporResistanceFactor 
		{ 
			get 
			{
				if(_activated) return _lowerVaporResistanceFactor;
				Activate();
				return _lowerVaporResistanceFactor;
			} 
			set
			{
				SetValue( v =>  _lowerVaporResistanceFactor = v, _lowerVaporResistanceFactor, value,  "LowerVaporResistanceFactor", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 4)]
		public IfcIsothermalMoistureCapacityMeasure? @IsothermalMoistureCapacity 
		{ 
			get 
			{
				if(_activated) return _isothermalMoistureCapacity;
				Activate();
				return _isothermalMoistureCapacity;
			} 
			set
			{
				SetValue( v =>  _isothermalMoistureCapacity = v, _isothermalMoistureCapacity, value,  "IsothermalMoistureCapacity", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 5)]
		public IfcVaporPermeabilityMeasure? @VaporPermeability 
		{ 
			get 
			{
				if(_activated) return _vaporPermeability;
				Activate();
				return _vaporPermeability;
			} 
			set
			{
				SetValue( v =>  _vaporPermeability = v, _vaporPermeability, value,  "VaporPermeability", 5);
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public IfcMoistureDiffusivityMeasure? @MoistureDiffusivity 
		{ 
			get 
			{
				if(_activated) return _moistureDiffusivity;
				Activate();
				return _moistureDiffusivity;
			} 
			set
			{
				SetValue( v =>  _moistureDiffusivity = v, _moistureDiffusivity, value,  "MoistureDiffusivity", 6);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 1: 
					_upperVaporResistanceFactor = value.RealVal;
					return;
				case 2: 
					_lowerVaporResistanceFactor = value.RealVal;
					return;
				case 3: 
					_isothermalMoistureCapacity = value.RealVal;
					return;
				case 4: 
					_vaporPermeability = value.RealVal;
					return;
				case 5: 
					_moistureDiffusivity = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcHygroscopicMaterialProperties other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Material != null)
					yield return @Material;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}