// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.PropertyResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.ApprovalResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcApprovalPropertyRelationship
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcApprovalPropertyRelationship : IPersistEntity
	{
		IItemSet<IIfcProperty> @ApprovedProperties { get; }
		IIfcApproval @Approval { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.ApprovalResource
{
	[ExpressType("IfcApprovalPropertyRelationship", 376)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcApprovalPropertyRelationship : PersistEntity, IInstantiableEntity, IIfcApprovalPropertyRelationship, IContainsEntityReferences, IEquatable<@IfcApprovalPropertyRelationship>
	{
		#region IIfcApprovalPropertyRelationship explicit implementation
		IItemSet<IIfcProperty> IIfcApprovalPropertyRelationship.ApprovedProperties { 
			get { return new Common.Collections.ProxyItemSet<IfcProperty, IIfcProperty>( @ApprovedProperties); } 
		}	
		IIfcApproval IIfcApprovalPropertyRelationship.Approval { 
 
 
			get { return @Approval; } 
			set { Approval = value as IfcApproval;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcApprovalPropertyRelationship(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_approvedProperties = new ItemSet<IfcProperty>( this, 0,  1);
		}

		#region Explicit attribute fields
		private readonly ItemSet<IfcProperty> _approvedProperties;
		private IfcApproval _approval;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 1, -1, 1)]
		public IItemSet<IfcProperty> @ApprovedProperties 
		{ 
			get 
			{
				if(_activated) return _approvedProperties;
				Activate();
				return _approvedProperties;
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 2)]
		public IfcApproval @Approval 
		{ 
			get 
			{
				if(_activated) return _approval;
				Activate();
				return _approval;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _approval = v, _approval, value,  "Approval", 2);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_approvedProperties.InternalAdd((IfcProperty)value.EntityVal);
					return;
				case 1: 
					_approval = (IfcApproval)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcApprovalPropertyRelationship other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				foreach(var entity in @ApprovedProperties)
					yield return entity;
				if (@Approval != null)
					yield return @Approval;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}