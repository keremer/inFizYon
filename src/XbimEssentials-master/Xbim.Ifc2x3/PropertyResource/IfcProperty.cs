// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.PropertyResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcProperty
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcProperty : IPersistEntity
	{
		IfcIdentifier @Name { get;  set; }
		IfcText? @Description { get;  set; }
		IEnumerable<IIfcPropertyDependencyRelationship> @PropertyForDependance {  get; }
		IEnumerable<IIfcPropertyDependencyRelationship> @PropertyDependsOn {  get; }
		IEnumerable<IIfcComplexProperty> @PartOfComplex {  get; }
	
	}
}

namespace Xbim.Ifc2x3.PropertyResource
{
	[ExpressType("IfcProperty", 5)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcProperty : PersistEntity, IIfcProperty, IEquatable<@IfcProperty>
	{
		#region IIfcProperty explicit implementation
		IfcIdentifier IIfcProperty.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		IfcText? IIfcProperty.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		 
		IEnumerable<IIfcPropertyDependencyRelationship> IIfcProperty.PropertyForDependance {  get { return @PropertyForDependance; } }
		IEnumerable<IIfcPropertyDependencyRelationship> IIfcProperty.PropertyDependsOn {  get { return @PropertyDependsOn; } }
		IEnumerable<IIfcComplexProperty> IIfcProperty.PartOfComplex {  get { return @PartOfComplex; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcProperty(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcIdentifier _name;
		private IfcText? _description;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcIdentifier @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 2);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("DependingProperty")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, -1, 3)]
		public IEnumerable<IfcPropertyDependencyRelationship> @PropertyForDependance 
		{ 
			get 
			{
				return Model.Instances.Where<IfcPropertyDependencyRelationship>(e => Equals(e.DependingProperty), "DependingProperty", this);
			} 
		}
		[InverseProperty("DependantProperty")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, -1, 4)]
		public IEnumerable<IfcPropertyDependencyRelationship> @PropertyDependsOn 
		{ 
			get 
			{
				return Model.Instances.Where<IfcPropertyDependencyRelationship>(e => Equals(e.DependantProperty), "DependantProperty", this);
			} 
		}
		[InverseProperty("HasProperties")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, 1, 5)]
		public IEnumerable<IfcComplexProperty> @PartOfComplex 
		{ 
			get 
			{
				return Model.Instances.Where<IfcComplexProperty>(e => e.HasProperties != null &&  e.HasProperties.Contains(this), "HasProperties", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_name = value.StringVal;
					return;
				case 1: 
					_description = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcProperty other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}