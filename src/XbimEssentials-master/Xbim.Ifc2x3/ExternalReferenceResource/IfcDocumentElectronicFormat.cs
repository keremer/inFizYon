// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.ExternalReferenceResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcDocumentElectronicFormat
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcDocumentElectronicFormat : IPersistEntity
	{
		IfcLabel? @FileExtension { get;  set; }
		IfcLabel? @MimeContentType { get;  set; }
		IfcLabel? @MimeSubtype { get;  set; }
	
	}
}

namespace Xbim.Ifc2x3.ExternalReferenceResource
{
	[ExpressType("IfcDocumentElectronicFormat", 599)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcDocumentElectronicFormat : PersistEntity, IInstantiableEntity, IIfcDocumentElectronicFormat, IEquatable<@IfcDocumentElectronicFormat>
	{
		#region IIfcDocumentElectronicFormat explicit implementation
		IfcLabel? IIfcDocumentElectronicFormat.FileExtension { 
 
			get { return @FileExtension; } 
			set { FileExtension = value;}
		}	
		IfcLabel? IIfcDocumentElectronicFormat.MimeContentType { 
 
			get { return @MimeContentType; } 
			set { MimeContentType = value;}
		}	
		IfcLabel? IIfcDocumentElectronicFormat.MimeSubtype { 
 
			get { return @MimeSubtype; } 
			set { MimeSubtype = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcDocumentElectronicFormat(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcLabel? _fileExtension;
		private IfcLabel? _mimeContentType;
		private IfcLabel? _mimeSubtype;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcLabel? @FileExtension 
		{ 
			get 
			{
				if(_activated) return _fileExtension;
				Activate();
				return _fileExtension;
			} 
			set
			{
				SetValue( v =>  _fileExtension = v, _fileExtension, value,  "FileExtension", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcLabel? @MimeContentType 
		{ 
			get 
			{
				if(_activated) return _mimeContentType;
				Activate();
				return _mimeContentType;
			} 
			set
			{
				SetValue( v =>  _mimeContentType = v, _mimeContentType, value,  "MimeContentType", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcLabel? @MimeSubtype 
		{ 
			get 
			{
				if(_activated) return _mimeSubtype;
				Activate();
				return _mimeSubtype;
			} 
			set
			{
				SetValue( v =>  _mimeSubtype = v, _mimeSubtype, value,  "MimeSubtype", 3);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_fileExtension = value.StringVal;
					return;
				case 1: 
					_mimeContentType = value.StringVal;
					return;
				case 2: 
					_mimeSubtype = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcDocumentElectronicFormat other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}