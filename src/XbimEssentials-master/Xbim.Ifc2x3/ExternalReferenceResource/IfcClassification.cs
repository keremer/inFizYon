// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc2x3.MeasureResource;
using Xbim.Ifc2x3.DateTimeResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc2x3.Interfaces;
using Xbim.Ifc2x3.ExternalReferenceResource;
//## Custom using statements
//##

namespace Xbim.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcClassification
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcClassification : IPersistEntity
	{
		IfcLabel @Source { get;  set; }
		IfcLabel @Edition { get;  set; }
		IIfcCalendarDate @EditionDate { get;  set; }
		IfcLabel @Name { get;  set; }
		IEnumerable<IIfcClassificationItem> @Contains {  get; }
	
	}
}

namespace Xbim.Ifc2x3.ExternalReferenceResource
{
	[ExpressType("IfcClassification", 412)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcClassification : PersistEntity, IInstantiableEntity, IIfcClassification, IContainsEntityReferences, IEquatable<@IfcClassification>
	{
		#region IIfcClassification explicit implementation
		IfcLabel IIfcClassification.Source { 
 
			get { return @Source; } 
			set { Source = value;}
		}	
		IfcLabel IIfcClassification.Edition { 
 
			get { return @Edition; } 
			set { Edition = value;}
		}	
		IIfcCalendarDate IIfcClassification.EditionDate { 
 
 
			get { return @EditionDate; } 
			set { EditionDate = value as IfcCalendarDate;}
		}	
		IfcLabel IIfcClassification.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		 
		IEnumerable<IIfcClassificationItem> IIfcClassification.Contains {  get { return @Contains; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcClassification(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcLabel _source;
		private IfcLabel _edition;
		private IfcCalendarDate _editionDate;
		private IfcLabel _name;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcLabel @Source 
		{ 
			get 
			{
				if(_activated) return _source;
				Activate();
				return _source;
			} 
			set
			{
				SetValue( v =>  _source = v, _source, value,  "Source", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcLabel @Edition 
		{ 
			get 
			{
				if(_activated) return _edition;
				Activate();
				return _edition;
			} 
			set
			{
				SetValue( v =>  _edition = v, _edition, value,  "Edition", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 3)]
		public IfcCalendarDate @EditionDate 
		{ 
			get 
			{
				if(_activated) return _editionDate;
				Activate();
				return _editionDate;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _editionDate = v, _editionDate, value,  "EditionDate", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 4)]
		public IfcLabel @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 4);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("ItemOf")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, -1, 5)]
		public IEnumerable<IfcClassificationItem> @Contains 
		{ 
			get 
			{
				return Model.Instances.Where<IfcClassificationItem>(e => Equals(e.ItemOf), "ItemOf", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_source = value.StringVal;
					return;
				case 1: 
					_edition = value.StringVal;
					return;
				case 2: 
					_editionDate = (IfcCalendarDate)(value.EntityVal);
					return;
				case 3: 
					_name = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcClassification other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@EditionDate != null)
					yield return @EditionDate;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}