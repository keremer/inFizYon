// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieJob
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieJob : ICobieReferencedObject
	{
		string @TaskNumber { get;  set; }
		string @Name { get;  set; }
		string @Description { get;  set; }
		ICobieJobType @JobType { get;  set; }
		ICobieJobStatusType @JobStatusType { get;  set; }
		double? @Duration { get;  set; }
		ICobieDurationUnit @DurationUnit { get;  set; }
		double? @Start { get;  set; }
		ICobieDurationUnit @StartUnit { get;  set; }
		double? @Frequency { get;  set; }
		ICobieDurationUnit @FrequencyUnit { get;  set; }
		ICobieJob @Priors { get;  set; }
		IItemSet<ICobieResource> @Resources { get; }
		ICobieType @Type { get;  set; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Job", 28)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieJob : CobieReferencedObject, IInstantiableEntity, ICobieJob, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieJob>
	{
		#region ICobieJob explicit implementation
		string ICobieJob.TaskNumber { 
 
			get { return @TaskNumber; } 
			set { TaskNumber = value;}
		}	
		string ICobieJob.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		string ICobieJob.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		ICobieJobType ICobieJob.JobType { 
 
 
			get { return @JobType; } 
			set { JobType = value as CobieJobType;}
		}	
		ICobieJobStatusType ICobieJob.JobStatusType { 
 
 
			get { return @JobStatusType; } 
			set { JobStatusType = value as CobieJobStatusType;}
		}	
		double? ICobieJob.Duration { 
 
			get { return @Duration; } 
			set { Duration = value;}
		}	
		ICobieDurationUnit ICobieJob.DurationUnit { 
 
 
			get { return @DurationUnit; } 
			set { DurationUnit = value as CobieDurationUnit;}
		}	
		double? ICobieJob.Start { 
 
			get { return @Start; } 
			set { Start = value;}
		}	
		ICobieDurationUnit ICobieJob.StartUnit { 
 
 
			get { return @StartUnit; } 
			set { StartUnit = value as CobieDurationUnit;}
		}	
		double? ICobieJob.Frequency { 
 
			get { return @Frequency; } 
			set { Frequency = value;}
		}	
		ICobieDurationUnit ICobieJob.FrequencyUnit { 
 
 
			get { return @FrequencyUnit; } 
			set { FrequencyUnit = value as CobieDurationUnit;}
		}	
		ICobieJob ICobieJob.Priors { 
 
 
			get { return @Priors; } 
			set { Priors = value as CobieJob;}
		}	
		IItemSet<ICobieResource> ICobieJob.Resources { 
			get { return new Common.Collections.ProxyItemSet<CobieResource, ICobieResource>( @Resources); } 
		}	
		ICobieType ICobieJob.Type { 
 
 
			get { return @Type; } 
			set { Type = value as CobieType;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieJob(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_resources = new OptionalItemSet<CobieResource>( this, 0,  18);
		}

		#region Explicit attribute fields
		private string _taskNumber;
		private string _name;
		private string _description;
		private CobieJobType _jobType;
		private CobieJobStatusType _jobStatusType;
		private double? _duration;
		private CobieDurationUnit _durationUnit;
		private double? _start;
		private CobieDurationUnit _startUnit;
		private double? _frequency;
		private CobieDurationUnit _frequencyUnit;
		private CobieJob _priors;
		private readonly OptionalItemSet<CobieResource> _resources;
		private CobieType _type;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public string @TaskNumber 
		{ 
			get 
			{
				if(_activated) return _taskNumber;
				Activate();
				return _taskNumber;
			} 
			set
			{
				SetValue( v =>  _taskNumber = v, _taskNumber, value,  "TaskNumber", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 7)]
		public string @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 8)]
		public string @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 9)]
		public CobieJobType @JobType 
		{ 
			get 
			{
				if(_activated) return _jobType;
				Activate();
				return _jobType;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _jobType = v, _jobType, value,  "JobType", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 10)]
		public CobieJobStatusType @JobStatusType 
		{ 
			get 
			{
				if(_activated) return _jobStatusType;
				Activate();
				return _jobStatusType;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _jobStatusType = v, _jobStatusType, value,  "JobStatusType", 10);
			} 
		}	
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 11)]
		public double? @Duration 
		{ 
			get 
			{
				if(_activated) return _duration;
				Activate();
				return _duration;
			} 
			set
			{
				SetValue( v =>  _duration = v, _duration, value,  "Duration", 11);
			} 
		}	
		[EntityAttribute(12, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 12)]
		public CobieDurationUnit @DurationUnit 
		{ 
			get 
			{
				if(_activated) return _durationUnit;
				Activate();
				return _durationUnit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _durationUnit = v, _durationUnit, value,  "DurationUnit", 12);
			} 
		}	
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 13)]
		public double? @Start 
		{ 
			get 
			{
				if(_activated) return _start;
				Activate();
				return _start;
			} 
			set
			{
				SetValue( v =>  _start = v, _start, value,  "Start", 13);
			} 
		}	
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 14)]
		public CobieDurationUnit @StartUnit 
		{ 
			get 
			{
				if(_activated) return _startUnit;
				Activate();
				return _startUnit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _startUnit = v, _startUnit, value,  "StartUnit", 14);
			} 
		}	
		[EntityAttribute(15, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 15)]
		public double? @Frequency 
		{ 
			get 
			{
				if(_activated) return _frequency;
				Activate();
				return _frequency;
			} 
			set
			{
				SetValue( v =>  _frequency = v, _frequency, value,  "Frequency", 15);
			} 
		}	
		[EntityAttribute(16, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 16)]
		public CobieDurationUnit @FrequencyUnit 
		{ 
			get 
			{
				if(_activated) return _frequencyUnit;
				Activate();
				return _frequencyUnit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _frequencyUnit = v, _frequencyUnit, value,  "FrequencyUnit", 16);
			} 
		}	
		[EntityAttribute(17, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 17)]
		public CobieJob @Priors 
		{ 
			get 
			{
				if(_activated) return _priors;
				Activate();
				return _priors;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _priors = v, _priors, value,  "Priors", 17);
			} 
		}	
		[EntityAttribute(18, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.Class, 0, -1, 18)]
		public IOptionalItemSet<CobieResource> @Resources 
		{ 
			get 
			{
				if(_activated) return _resources;
				Activate();
				return _resources;
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(19, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 19)]
		public CobieType @Type 
		{ 
			get 
			{
				if(_activated) return _type;
				Activate();
				return _type;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _type = v, _type, value,  "Type", 19);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 5: 
					_taskNumber = value.StringVal;
					return;
				case 6: 
					_name = value.StringVal;
					return;
				case 7: 
					_description = value.StringVal;
					return;
				case 8: 
					_jobType = (CobieJobType)(value.EntityVal);
					return;
				case 9: 
					_jobStatusType = (CobieJobStatusType)(value.EntityVal);
					return;
				case 10: 
					_duration = value.RealVal;
					return;
				case 11: 
					_durationUnit = (CobieDurationUnit)(value.EntityVal);
					return;
				case 12: 
					_start = value.RealVal;
					return;
				case 13: 
					_startUnit = (CobieDurationUnit)(value.EntityVal);
					return;
				case 14: 
					_frequency = value.RealVal;
					return;
				case 15: 
					_frequencyUnit = (CobieDurationUnit)(value.EntityVal);
					return;
				case 16: 
					_priors = (CobieJob)(value.EntityVal);
					return;
				case 17: 
					_resources.InternalAdd((CobieResource)value.EntityVal);
					return;
				case 18: 
					_type = (CobieType)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieJob other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				if (@JobType != null)
					yield return @JobType;
				if (@JobStatusType != null)
					yield return @JobStatusType;
				if (@DurationUnit != null)
					yield return @DurationUnit;
				if (@StartUnit != null)
					yield return @StartUnit;
				if (@FrequencyUnit != null)
					yield return @FrequencyUnit;
				if (@Priors != null)
					yield return @Priors;
				foreach(var entity in @Resources)
					yield return entity;
				if (@Type != null)
					yield return @Type;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@Type != null)
					yield return @Type;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}