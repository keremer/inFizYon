// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieZone
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieZone : ICobieAsset
	{
		IItemSet<ICobieSpace> @Spaces { get; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Zone", 19)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieZone : CobieAsset, IInstantiableEntity, ICobieZone, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieZone>
	{
		#region ICobieZone explicit implementation
		IItemSet<ICobieSpace> ICobieZone.Spaces { 
			get { return new Common.Collections.ProxyItemSet<CobieSpace, ICobieSpace>( @Spaces); } 
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieZone(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_spaces = new OptionalItemSet<CobieSpace>( this, 0,  13);
		}

		#region Explicit attribute fields
		private readonly OptionalItemSet<CobieSpace> _spaces;
		#endregion
	
		#region Explicit attribute properties
		[IndexedProperty]
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.Class, 1, -1, 15)]
		public IOptionalItemSet<CobieSpace> @Spaces 
		{ 
			get 
			{
				if(_activated) return _spaces;
				Activate();
				return _spaces;
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
				case 10: 
				case 11: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 12: 
					_spaces.InternalAdd((CobieSpace)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieZone other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				foreach(var entity in @Categories)
					yield return entity;
				foreach(var entity in @Impacts)
					yield return entity;
				foreach(var entity in @Documents)
					yield return entity;
				foreach(var entity in @Attributes)
					yield return entity;
				foreach(var entity in @Representations)
					yield return entity;
				foreach(var entity in @Spaces)
					yield return entity;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				foreach(var entity in @Spaces)
					yield return entity;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}