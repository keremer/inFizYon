// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieCategory
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieCategory : ICobiePickValue
	{
		string @Description { get;  set; }
		ICobieClassification @Classification { get;  set; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Category", 36)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieCategory : CobiePickValue, IInstantiableEntity, ICobieCategory, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieCategory>
	{
		#region ICobieCategory explicit implementation
		string ICobieCategory.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		ICobieClassification ICobieCategory.Classification { 
 
 
			get { return @Classification; } 
			set { Classification = value as CobieClassification;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieCategory(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private string _description;
		private CobieClassification _classification;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public string @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 2);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 3)]
		public CobieClassification @Classification 
		{ 
			get 
			{
				if(_activated) return _classification;
				Activate();
				return _classification;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _classification = v, _classification, value,  "Classification", 3);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 1: 
					_description = value.StringVal;
					return;
				case 2: 
					_classification = (CobieClassification)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieCategory other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Classification != null)
					yield return @Classification;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@Classification != null)
					yield return @Classification;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}