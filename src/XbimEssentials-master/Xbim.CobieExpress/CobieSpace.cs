// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieSpace
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieSpace : ICobieAsset, SpatialDivision
	{
		string @RoomTag { get;  set; }
		double? @UsableHeight { get;  set; }
		double? @GrossArea { get;  set; }
		double? @NetArea { get;  set; }
		ICobieFloor @Floor { get;  set; }
		IEnumerable<ICobieComponent> @Components {  get; }
		IEnumerable<ICobieZone> @InZones {  get; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Space", 18)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieSpace : CobieAsset, IInstantiableEntity, ICobieSpace, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieSpace>
	{
		#region ICobieSpace explicit implementation
		string ICobieSpace.RoomTag { 
 
			get { return @RoomTag; } 
			set { RoomTag = value;}
		}	
		double? ICobieSpace.UsableHeight { 
 
			get { return @UsableHeight; } 
			set { UsableHeight = value;}
		}	
		double? ICobieSpace.GrossArea { 
 
			get { return @GrossArea; } 
			set { GrossArea = value;}
		}	
		double? ICobieSpace.NetArea { 
 
			get { return @NetArea; } 
			set { NetArea = value;}
		}	
		ICobieFloor ICobieSpace.Floor { 
 
 
			get { return @Floor; } 
			set { Floor = value as CobieFloor;}
		}	
		 
		IEnumerable<ICobieComponent> ICobieSpace.Components {  get { return @Components; } }
		IEnumerable<ICobieZone> ICobieSpace.InZones {  get { return @InZones; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieSpace(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private string _roomTag;
		private double? _usableHeight;
		private double? _grossArea;
		private double? _netArea;
		private CobieFloor _floor;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 15)]
		public string @RoomTag 
		{ 
			get 
			{
				if(_activated) return _roomTag;
				Activate();
				return _roomTag;
			} 
			set
			{
				SetValue( v =>  _roomTag = v, _roomTag, value,  "RoomTag", 13);
			} 
		}	
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 16)]
		public double? @UsableHeight 
		{ 
			get 
			{
				if(_activated) return _usableHeight;
				Activate();
				return _usableHeight;
			} 
			set
			{
				SetValue( v =>  _usableHeight = v, _usableHeight, value,  "UsableHeight", 14);
			} 
		}	
		[EntityAttribute(15, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 17)]
		public double? @GrossArea 
		{ 
			get 
			{
				if(_activated) return _grossArea;
				Activate();
				return _grossArea;
			} 
			set
			{
				SetValue( v =>  _grossArea = v, _grossArea, value,  "GrossArea", 15);
			} 
		}	
		[EntityAttribute(16, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 18)]
		public double? @NetArea 
		{ 
			get 
			{
				if(_activated) return _netArea;
				Activate();
				return _netArea;
			} 
			set
			{
				SetValue( v =>  _netArea = v, _netArea, value,  "NetArea", 16);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(17, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 19)]
		public CobieFloor @Floor 
		{ 
			get 
			{
				if(_activated) return _floor;
				Activate();
				return _floor;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _floor = v, _floor, value,  "Floor", 17);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("Spaces")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1, 20)]
		public IEnumerable<CobieComponent> @Components 
		{ 
			get 
			{
				return Model.Instances.Where<CobieComponent>(e => e.Spaces != null &&  e.Spaces.Contains(this), "Spaces", this);
			} 
		}
		[InverseProperty("Spaces")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1, 21)]
		public IEnumerable<CobieZone> @InZones 
		{ 
			get 
			{
				return Model.Instances.Where<CobieZone>(e => e.Spaces != null &&  e.Spaces.Contains(this), "Spaces", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
				case 10: 
				case 11: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 12: 
					_roomTag = value.StringVal;
					return;
				case 13: 
					_usableHeight = value.RealVal;
					return;
				case 14: 
					_grossArea = value.RealVal;
					return;
				case 15: 
					_netArea = value.RealVal;
					return;
				case 16: 
					_floor = (CobieFloor)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieSpace other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				foreach(var entity in @Categories)
					yield return entity;
				foreach(var entity in @Impacts)
					yield return entity;
				foreach(var entity in @Documents)
					yield return entity;
				foreach(var entity in @Attributes)
					yield return entity;
				foreach(var entity in @Representations)
					yield return entity;
				if (@Floor != null)
					yield return @Floor;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@Floor != null)
					yield return @Floor;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}