// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieFloor
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieFloor : ICobieAsset, SpatialDivision
	{
		double? @Elevation { get;  set; }
		double? @Height { get;  set; }
		ICobieFacility @Facility { get;  set; }
		IEnumerable<ICobieSpace> @Spaces {  get; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Floor", 17)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieFloor : CobieAsset, IInstantiableEntity, ICobieFloor, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieFloor>
	{
		#region ICobieFloor explicit implementation
		double? ICobieFloor.Elevation { 
 
			get { return @Elevation; } 
			set { Elevation = value;}
		}	
		double? ICobieFloor.Height { 
 
			get { return @Height; } 
			set { Height = value;}
		}	
		ICobieFacility ICobieFloor.Facility { 
 
 
			get { return @Facility; } 
			set { Facility = value as CobieFacility;}
		}	
		 
		IEnumerable<ICobieSpace> ICobieFloor.Spaces {  get { return @Spaces; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieFloor(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private double? _elevation;
		private double? _height;
		private CobieFacility _facility;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 15)]
		public double? @Elevation 
		{ 
			get 
			{
				if(_activated) return _elevation;
				Activate();
				return _elevation;
			} 
			set
			{
				SetValue( v =>  _elevation = v, _elevation, value,  "Elevation", 13);
			} 
		}	
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 16)]
		public double? @Height 
		{ 
			get 
			{
				if(_activated) return _height;
				Activate();
				return _height;
			} 
			set
			{
				SetValue( v =>  _height = v, _height, value,  "Height", 14);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(15, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 17)]
		public CobieFacility @Facility 
		{ 
			get 
			{
				if(_activated) return _facility;
				Activate();
				return _facility;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _facility = v, _facility, value,  "Facility", 15);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("Floor")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, -1, -1, 18)]
		public IEnumerable<CobieSpace> @Spaces 
		{ 
			get 
			{
				return Model.Instances.Where<CobieSpace>(e => Equals(e.Floor), "Floor", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
				case 7: 
				case 8: 
				case 9: 
				case 10: 
				case 11: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 12: 
					_elevation = value.RealVal;
					return;
				case 13: 
					_height = value.RealVal;
					return;
				case 14: 
					_facility = (CobieFacility)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieFloor other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				foreach(var entity in @Categories)
					yield return entity;
				foreach(var entity in @Impacts)
					yield return entity;
				foreach(var entity in @Documents)
					yield return entity;
				foreach(var entity in @Attributes)
					yield return entity;
				foreach(var entity in @Representations)
					yield return entity;
				if (@Facility != null)
					yield return @Facility;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@Facility != null)
					yield return @Facility;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}