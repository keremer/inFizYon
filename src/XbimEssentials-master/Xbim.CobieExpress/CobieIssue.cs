// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieIssue
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieIssue : ICobieReferencedObject
	{
		string @Name { get;  set; }
		string @Description { get;  set; }
		ICobieIssueType @IssueType { get;  set; }
		ICobieIssueRisk @Risk { get;  set; }
		ICobieIssueChance @Chance { get;  set; }
		ICobieIssueImpact @Impact { get;  set; }
		ICobieContact @Owner { get;  set; }
		string @Mitigation { get;  set; }
		ICobieAsset @Causing { get;  set; }
		ICobieAsset @Affected { get;  set; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Issue", 32)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieIssue : CobieReferencedObject, IInstantiableEntity, ICobieIssue, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieIssue>
	{
		#region ICobieIssue explicit implementation
		string ICobieIssue.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		string ICobieIssue.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		ICobieIssueType ICobieIssue.IssueType { 
 
 
			get { return @IssueType; } 
			set { IssueType = value as CobieIssueType;}
		}	
		ICobieIssueRisk ICobieIssue.Risk { 
 
 
			get { return @Risk; } 
			set { Risk = value as CobieIssueRisk;}
		}	
		ICobieIssueChance ICobieIssue.Chance { 
 
 
			get { return @Chance; } 
			set { Chance = value as CobieIssueChance;}
		}	
		ICobieIssueImpact ICobieIssue.Impact { 
 
 
			get { return @Impact; } 
			set { Impact = value as CobieIssueImpact;}
		}	
		ICobieContact ICobieIssue.Owner { 
 
 
			get { return @Owner; } 
			set { Owner = value as CobieContact;}
		}	
		string ICobieIssue.Mitigation { 
 
			get { return @Mitigation; } 
			set { Mitigation = value;}
		}	
		ICobieAsset ICobieIssue.Causing { 
 
 
			get { return @Causing; } 
			set { Causing = value as CobieAsset;}
		}	
		ICobieAsset ICobieIssue.Affected { 
 
 
			get { return @Affected; } 
			set { Affected = value as CobieAsset;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieIssue(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private CobieIssueType _issueType;
		private CobieIssueRisk _risk;
		private CobieIssueChance _chance;
		private CobieIssueImpact _impact;
		private CobieContact _owner;
		private string _mitigation;
		private CobieAsset _causing;
		private CobieAsset _affected;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public string @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 7)]
		public string @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 8)]
		public CobieIssueType @IssueType 
		{ 
			get 
			{
				if(_activated) return _issueType;
				Activate();
				return _issueType;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _issueType = v, _issueType, value,  "IssueType", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 9)]
		public CobieIssueRisk @Risk 
		{ 
			get 
			{
				if(_activated) return _risk;
				Activate();
				return _risk;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _risk = v, _risk, value,  "Risk", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 10)]
		public CobieIssueChance @Chance 
		{ 
			get 
			{
				if(_activated) return _chance;
				Activate();
				return _chance;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _chance = v, _chance, value,  "Chance", 10);
			} 
		}	
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 11)]
		public CobieIssueImpact @Impact 
		{ 
			get 
			{
				if(_activated) return _impact;
				Activate();
				return _impact;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _impact = v, _impact, value,  "Impact", 11);
			} 
		}	
		[EntityAttribute(12, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 12)]
		public CobieContact @Owner 
		{ 
			get 
			{
				if(_activated) return _owner;
				Activate();
				return _owner;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _owner = v, _owner, value,  "Owner", 12);
			} 
		}	
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 13)]
		public string @Mitigation 
		{ 
			get 
			{
				if(_activated) return _mitigation;
				Activate();
				return _mitigation;
			} 
			set
			{
				SetValue( v =>  _mitigation = v, _mitigation, value,  "Mitigation", 13);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 14)]
		public CobieAsset @Causing 
		{ 
			get 
			{
				if(_activated) return _causing;
				Activate();
				return _causing;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _causing = v, _causing, value,  "Causing", 14);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(15, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 15)]
		public CobieAsset @Affected 
		{ 
			get 
			{
				if(_activated) return _affected;
				Activate();
				return _affected;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _affected = v, _affected, value,  "Affected", 15);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 5: 
					_name = value.StringVal;
					return;
				case 6: 
					_description = value.StringVal;
					return;
				case 7: 
					_issueType = (CobieIssueType)(value.EntityVal);
					return;
				case 8: 
					_risk = (CobieIssueRisk)(value.EntityVal);
					return;
				case 9: 
					_chance = (CobieIssueChance)(value.EntityVal);
					return;
				case 10: 
					_impact = (CobieIssueImpact)(value.EntityVal);
					return;
				case 11: 
					_owner = (CobieContact)(value.EntityVal);
					return;
				case 12: 
					_mitigation = value.StringVal;
					return;
				case 13: 
					_causing = (CobieAsset)(value.EntityVal);
					return;
				case 14: 
					_affected = (CobieAsset)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieIssue other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				if (@IssueType != null)
					yield return @IssueType;
				if (@Risk != null)
					yield return @Risk;
				if (@Chance != null)
					yield return @Chance;
				if (@Impact != null)
					yield return @Impact;
				if (@Owner != null)
					yield return @Owner;
				if (@Causing != null)
					yield return @Causing;
				if (@Affected != null)
					yield return @Affected;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@Causing != null)
					yield return @Causing;
				if (@Affected != null)
					yield return @Affected;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}