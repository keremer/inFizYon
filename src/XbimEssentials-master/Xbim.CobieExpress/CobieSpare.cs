// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieSpare
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieSpare : ICobieReferencedObject
	{
		string @Name { get;  set; }
		string @Description { get;  set; }
		ICobieSpareType @SpareType { get;  set; }
		ICobieType @Type { get;  set; }
		IItemSet<ICobieContact> @Suppliers { get; }
		string @SetNumber { get;  set; }
		string @PartNumber { get;  set; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Spare", 26)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieSpare : CobieReferencedObject, IInstantiableEntity, ICobieSpare, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@CobieSpare>
	{
		#region ICobieSpare explicit implementation
		string ICobieSpare.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		string ICobieSpare.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		ICobieSpareType ICobieSpare.SpareType { 
 
 
			get { return @SpareType; } 
			set { SpareType = value as CobieSpareType;}
		}	
		ICobieType ICobieSpare.Type { 
 
 
			get { return @Type; } 
			set { Type = value as CobieType;}
		}	
		IItemSet<ICobieContact> ICobieSpare.Suppliers { 
			get { return new Common.Collections.ProxyItemSet<CobieContact, ICobieContact>( @Suppliers); } 
		}	
		string ICobieSpare.SetNumber { 
 
			get { return @SetNumber; } 
			set { SetNumber = value;}
		}	
		string ICobieSpare.PartNumber { 
 
			get { return @PartNumber; } 
			set { PartNumber = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieSpare(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_suppliers = new OptionalItemSet<CobieContact>( this, 0,  10);
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private CobieSpareType _spareType;
		private CobieType _type;
		private readonly OptionalItemSet<CobieContact> _suppliers;
		private string _setNumber;
		private string _partNumber;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public string @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 7)]
		public string @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 8)]
		public CobieSpareType @SpareType 
		{ 
			get 
			{
				if(_activated) return _spareType;
				Activate();
				return _spareType;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _spareType = v, _spareType, value,  "SpareType", 8);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(9, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 9)]
		public CobieType @Type 
		{ 
			get 
			{
				if(_activated) return _type;
				Activate();
				return _type;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _type = v, _type, value,  "Type", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.Class, 0, -1, 10)]
		public IOptionalItemSet<CobieContact> @Suppliers 
		{ 
			get 
			{
				if(_activated) return _suppliers;
				Activate();
				return _suppliers;
			} 
		}	
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 11)]
		public string @SetNumber 
		{ 
			get 
			{
				if(_activated) return _setNumber;
				Activate();
				return _setNumber;
			} 
			set
			{
				SetValue( v =>  _setNumber = v, _setNumber, value,  "SetNumber", 11);
			} 
		}	
		[EntityAttribute(12, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 12)]
		public string @PartNumber 
		{ 
			get 
			{
				if(_activated) return _partNumber;
				Activate();
				return _partNumber;
			} 
			set
			{
				SetValue( v =>  _partNumber = v, _partNumber, value,  "PartNumber", 12);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 5: 
					_name = value.StringVal;
					return;
				case 6: 
					_description = value.StringVal;
					return;
				case 7: 
					_spareType = (CobieSpareType)(value.EntityVal);
					return;
				case 8: 
					_type = (CobieType)(value.EntityVal);
					return;
				case 9: 
					_suppliers.InternalAdd((CobieContact)value.EntityVal);
					return;
				case 10: 
					_setNumber = value.StringVal;
					return;
				case 11: 
					_partNumber = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieSpare other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				if (@SpareType != null)
					yield return @SpareType;
				if (@Type != null)
					yield return @Type;
				foreach(var entity in @Suppliers)
					yield return entity;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@Type != null)
					yield return @Type;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}