// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieDocument
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieDocument : ICobieReferencedObject
	{
		string @Name { get;  set; }
		string @Description { get;  set; }
		ICobieDocumentType @DocumentType { get;  set; }
		ICobieApprovalType @ApprovalType { get;  set; }
		ICobieStageType @Stage { get;  set; }
		string @URL { get;  set; }
		string @Reference { get;  set; }
		string @Directory { get;  set; }
		string @File { get;  set; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("Document", 30)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @CobieDocument : CobieReferencedObject, IInstantiableEntity, ICobieDocument, IContainsEntityReferences, IEquatable<@CobieDocument>
	{
		#region ICobieDocument explicit implementation
		string ICobieDocument.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		string ICobieDocument.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		ICobieDocumentType ICobieDocument.DocumentType { 
 
 
			get { return @DocumentType; } 
			set { DocumentType = value as CobieDocumentType;}
		}	
		ICobieApprovalType ICobieDocument.ApprovalType { 
 
 
			get { return @ApprovalType; } 
			set { ApprovalType = value as CobieApprovalType;}
		}	
		ICobieStageType ICobieDocument.Stage { 
 
 
			get { return @Stage; } 
			set { Stage = value as CobieStageType;}
		}	
		string ICobieDocument.URL { 
 
			get { return @URL; } 
			set { URL = value;}
		}	
		string ICobieDocument.Reference { 
 
			get { return @Reference; } 
			set { Reference = value;}
		}	
		string ICobieDocument.Directory { 
 
			get { return @Directory; } 
			set { Directory = value;}
		}	
		string ICobieDocument.File { 
 
			get { return @File; } 
			set { File = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieDocument(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private string _name;
		private string _description;
		private CobieDocumentType _documentType;
		private CobieApprovalType _approvalType;
		private CobieStageType _stage;
		private string _uRL;
		private string _reference;
		private string _directory;
		private string _file;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public string @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 7)]
		public string @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 8)]
		public CobieDocumentType @DocumentType 
		{ 
			get 
			{
				if(_activated) return _documentType;
				Activate();
				return _documentType;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _documentType = v, _documentType, value,  "DocumentType", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 9)]
		public CobieApprovalType @ApprovalType 
		{ 
			get 
			{
				if(_activated) return _approvalType;
				Activate();
				return _approvalType;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _approvalType = v, _approvalType, value,  "ApprovalType", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 10)]
		public CobieStageType @Stage 
		{ 
			get 
			{
				if(_activated) return _stage;
				Activate();
				return _stage;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _stage = v, _stage, value,  "Stage", 10);
			} 
		}	
		[EntityAttribute(11, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 11)]
		public string @URL 
		{ 
			get 
			{
				if(_activated) return _uRL;
				Activate();
				return _uRL;
			} 
			set
			{
				SetValue( v =>  _uRL = v, _uRL, value,  "URL", 11);
			} 
		}	
		[EntityAttribute(12, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 12)]
		public string @Reference 
		{ 
			get 
			{
				if(_activated) return _reference;
				Activate();
				return _reference;
			} 
			set
			{
				SetValue( v =>  _reference = v, _reference, value,  "Reference", 12);
			} 
		}	
		[EntityAttribute(13, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 13)]
		public string @Directory 
		{ 
			get 
			{
				if(_activated) return _directory;
				Activate();
				return _directory;
			} 
			set
			{
				SetValue( v =>  _directory = v, _directory, value,  "Directory", 13);
			} 
		}	
		[EntityAttribute(14, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 14)]
		public string @File 
		{ 
			get 
			{
				if(_activated) return _file;
				Activate();
				return _file;
			} 
			set
			{
				SetValue( v =>  _file = v, _file, value,  "File", 14);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 5: 
					_name = value.StringVal;
					return;
				case 6: 
					_description = value.StringVal;
					return;
				case 7: 
					_documentType = (CobieDocumentType)(value.EntityVal);
					return;
				case 8: 
					_approvalType = (CobieApprovalType)(value.EntityVal);
					return;
				case 9: 
					_stage = (CobieStageType)(value.EntityVal);
					return;
				case 10: 
					_uRL = value.StringVal;
					return;
				case 11: 
					_reference = value.StringVal;
					return;
				case 12: 
					_directory = value.StringVal;
					return;
				case 13: 
					_file = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieDocument other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Created != null)
					yield return @Created;
				if (@ExternalSystem != null)
					yield return @ExternalSystem;
				if (@ExternalObject != null)
					yield return @ExternalObject;
				if (@DocumentType != null)
					yield return @DocumentType;
				if (@ApprovalType != null)
					yield return @ApprovalType;
				if (@Stage != null)
					yield return @Stage;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}