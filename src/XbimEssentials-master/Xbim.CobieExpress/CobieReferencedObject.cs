// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.CobieExpress.Interfaces;
using Xbim.CobieExpress;
//## Custom using statements
//##

namespace Xbim.CobieExpress.Interfaces
{
	/// <summary>
    /// Readonly interface for CobieReferencedObject
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @ICobieReferencedObject : IPersistEntity
	{
		ICobieCreatedInfo @Created { get;  set; }
		string @ExternalId { get;  set; }
		string @AltExternalId { get;  set; }
		ICobieExternalSystem @ExternalSystem { get;  set; }
		ICobieExternalObject @ExternalObject { get;  set; }
	
	}
}

namespace Xbim.CobieExpress
{
	[ExpressType("ReferencedObject", 11)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @CobieReferencedObject : PersistEntity, ICobieReferencedObject, IEquatable<@CobieReferencedObject>
	{
		#region ICobieReferencedObject explicit implementation
		ICobieCreatedInfo ICobieReferencedObject.Created { 
 
 
			get { return @Created; } 
			set { Created = value as CobieCreatedInfo;}
		}	
		string ICobieReferencedObject.ExternalId { 
 
			get { return @ExternalId; } 
			set { ExternalId = value;}
		}	
		string ICobieReferencedObject.AltExternalId { 
 
			get { return @AltExternalId; } 
			set { AltExternalId = value;}
		}	
		ICobieExternalSystem ICobieReferencedObject.ExternalSystem { 
 
 
			get { return @ExternalSystem; } 
			set { ExternalSystem = value as CobieExternalSystem;}
		}	
		ICobieExternalObject ICobieReferencedObject.ExternalObject { 
 
 
			get { return @ExternalObject; } 
			set { ExternalObject = value as CobieExternalObject;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal CobieReferencedObject(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private CobieCreatedInfo _created;
		private string _externalId;
		private string _altExternalId;
		private CobieExternalSystem _externalSystem;
		private CobieExternalObject _externalObject;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 1)]
		public CobieCreatedInfo @Created 
		{ 
			get 
			{
				if(_activated) return _created;
				Activate();
				return _created;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _created = v, _created, value,  "Created", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public string @ExternalId 
		{ 
			get 
			{
				if(_activated) return _externalId;
				Activate();
				return _externalId;
			} 
			set
			{
				SetValue( v =>  _externalId = v, _externalId, value,  "ExternalId", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public string @AltExternalId 
		{ 
			get 
			{
				if(_activated) return _altExternalId;
				Activate();
				return _altExternalId;
			} 
			set
			{
				SetValue( v =>  _altExternalId = v, _altExternalId, value,  "AltExternalId", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 4)]
		public CobieExternalSystem @ExternalSystem 
		{ 
			get 
			{
				if(_activated) return _externalSystem;
				Activate();
				return _externalSystem;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _externalSystem = v, _externalSystem, value,  "ExternalSystem", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 5)]
		public CobieExternalObject @ExternalObject 
		{ 
			get 
			{
				if(_activated) return _externalObject;
				Activate();
				return _externalObject;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _externalObject = v, _externalObject, value,  "ExternalObject", 5);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_created = (CobieCreatedInfo)(value.EntityVal);
					return;
				case 1: 
					_externalId = value.StringVal;
					return;
				case 2: 
					_altExternalId = value.StringVal;
					return;
				case 3: 
					_externalSystem = (CobieExternalSystem)(value.EntityVal);
					return;
				case 4: 
					_externalObject = (CobieExternalObject)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@CobieReferencedObject other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}