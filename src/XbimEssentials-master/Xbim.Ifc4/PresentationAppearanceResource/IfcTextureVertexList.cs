// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.PresentationDefinitionResource;
using Xbim.Ifc4.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.PresentationAppearanceResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcTextureVertexList
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcTextureVertexList : IIfcPresentationItem
	{
		IItemSet<IItemSet<IfcParameterValue>> @TexCoordsList { get; }
	
	}
}

namespace Xbim.Ifc4.PresentationAppearanceResource
{
	[ExpressType("IfcTextureVertexList", 1301)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcTextureVertexList : IfcPresentationItem, IInstantiableEntity, IIfcTextureVertexList, IEquatable<@IfcTextureVertexList>
	{
		#region IIfcTextureVertexList explicit implementation
		IItemSet<IItemSet<IfcParameterValue>> IIfcTextureVertexList.TexCoordsList { 
			get { return @TexCoordsList; } 
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTextureVertexList(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_texCoordsList = new ItemSet<IItemSet<IfcParameterValue>>( this, 0,  1);
		}

		#region Explicit attribute fields
		private readonly ItemSet<IItemSet<IfcParameterValue>> _texCoordsList;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.List, EntityAttributeType.List, 2, 2, 1)]
		public IItemSet<IItemSet<IfcParameterValue>> @TexCoordsList 
		{ 
			get 
			{
				if(_activated) return _texCoordsList;
				Activate();
				return _texCoordsList;
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					((ItemSet<IfcParameterValue>)_texCoordsList
						.InternalGetAt(nestedIndex[0]) )
						.InternalAdd((IfcParameterValue)(value.RealVal));
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcTextureVertexList other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}