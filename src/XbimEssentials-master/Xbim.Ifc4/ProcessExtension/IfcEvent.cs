// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.ProcessExtension;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcEvent
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcEvent : IIfcProcess
	{
		IfcEventTypeEnum? @PredefinedType { get;  set; }
		IfcEventTriggerTypeEnum? @EventTriggerType { get;  set; }
		IfcLabel? @UserDefinedEventTriggerType { get;  set; }
		IIfcEventTime @EventOccurenceTime { get;  set; }
	
	}
}

namespace Xbim.Ifc4.ProcessExtension
{
	[ExpressType("IfcEvent", 1168)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcEvent : IfcProcess, IInstantiableEntity, IIfcEvent, IContainsEntityReferences, IEquatable<@IfcEvent>
	{
		#region IIfcEvent explicit implementation
		IfcEventTypeEnum? IIfcEvent.PredefinedType { 
 
			get { return @PredefinedType; } 
			set { PredefinedType = value;}
		}	
		IfcEventTriggerTypeEnum? IIfcEvent.EventTriggerType { 
 
			get { return @EventTriggerType; } 
			set { EventTriggerType = value;}
		}	
		IfcLabel? IIfcEvent.UserDefinedEventTriggerType { 
 
			get { return @UserDefinedEventTriggerType; } 
			set { UserDefinedEventTriggerType = value;}
		}	
		IIfcEventTime IIfcEvent.EventOccurenceTime { 
 
 
			get { return @EventOccurenceTime; } 
			set { EventOccurenceTime = value as IfcEventTime;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcEvent(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcEventTypeEnum? _predefinedType;
		private IfcEventTriggerTypeEnum? _eventTriggerType;
		private IfcLabel? _userDefinedEventTriggerType;
		private IfcEventTime _eventOccurenceTime;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 22)]
		public IfcEventTypeEnum? @PredefinedType 
		{ 
			get 
			{
				if(_activated) return _predefinedType;
				Activate();
				return _predefinedType;
			} 
			set
			{
				SetValue( v =>  _predefinedType = v, _predefinedType, value,  "PredefinedType", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 23)]
		public IfcEventTriggerTypeEnum? @EventTriggerType 
		{ 
			get 
			{
				if(_activated) return _eventTriggerType;
				Activate();
				return _eventTriggerType;
			} 
			set
			{
				SetValue( v =>  _eventTriggerType = v, _eventTriggerType, value,  "EventTriggerType", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 24)]
		public IfcLabel? @UserDefinedEventTriggerType 
		{ 
			get 
			{
				if(_activated) return _userDefinedEventTriggerType;
				Activate();
				return _userDefinedEventTriggerType;
			} 
			set
			{
				SetValue( v =>  _userDefinedEventTriggerType = v, _userDefinedEventTriggerType, value,  "UserDefinedEventTriggerType", 10);
			} 
		}	
		[EntityAttribute(11, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 25)]
		public IfcEventTime @EventOccurenceTime 
		{ 
			get 
			{
				if(_activated) return _eventOccurenceTime;
				Activate();
				return _eventOccurenceTime;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _eventOccurenceTime = v, _eventOccurenceTime, value,  "EventOccurenceTime", 11);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 7: 
                    _predefinedType = (IfcEventTypeEnum) System.Enum.Parse(typeof (IfcEventTypeEnum), value.EnumVal, true);
					return;
				case 8: 
                    _eventTriggerType = (IfcEventTriggerTypeEnum) System.Enum.Parse(typeof (IfcEventTriggerTypeEnum), value.EnumVal, true);
					return;
				case 9: 
					_userDefinedEventTriggerType = value.StringVal;
					return;
				case 10: 
					_eventOccurenceTime = (IfcEventTime)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcEvent other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@OwnerHistory != null)
					yield return @OwnerHistory;
				if (@EventOccurenceTime != null)
					yield return @EventOccurenceTime;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}