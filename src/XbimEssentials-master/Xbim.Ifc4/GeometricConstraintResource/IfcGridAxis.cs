// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.GeometryResource;
using Xbim.Ifc4.ProductExtension;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.GeometricConstraintResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcGridAxis
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcGridAxis : IPersistEntity
	{
		IfcLabel? @AxisTag { get;  set; }
		IIfcCurve @AxisCurve { get;  set; }
		IfcBoolean @SameSense { get;  set; }
		IEnumerable<IIfcGrid> @PartOfW {  get; }
		IEnumerable<IIfcGrid> @PartOfV {  get; }
		IEnumerable<IIfcGrid> @PartOfU {  get; }
		IEnumerable<IIfcVirtualGridIntersection> @HasIntersections {  get; }
	
	}
}

namespace Xbim.Ifc4.GeometricConstraintResource
{
	[ExpressType("IfcGridAxis", 441)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcGridAxis : PersistEntity, IInstantiableEntity, IIfcGridAxis, IContainsEntityReferences, IEquatable<@IfcGridAxis>
	{
		#region IIfcGridAxis explicit implementation
		IfcLabel? IIfcGridAxis.AxisTag { 
 
			get { return @AxisTag; } 
			set { AxisTag = value;}
		}	
		IIfcCurve IIfcGridAxis.AxisCurve { 
 
 
			get { return @AxisCurve; } 
			set { AxisCurve = value as IfcCurve;}
		}	
		IfcBoolean IIfcGridAxis.SameSense { 
 
			get { return @SameSense; } 
			set { SameSense = value;}
		}	
		 
		IEnumerable<IIfcGrid> IIfcGridAxis.PartOfW {  get { return @PartOfW; } }
		IEnumerable<IIfcGrid> IIfcGridAxis.PartOfV {  get { return @PartOfV; } }
		IEnumerable<IIfcGrid> IIfcGridAxis.PartOfU {  get { return @PartOfU; } }
		IEnumerable<IIfcVirtualGridIntersection> IIfcGridAxis.HasIntersections {  get { return @HasIntersections; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcGridAxis(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcLabel? _axisTag;
		private IfcCurve _axisCurve;
		private IfcBoolean _sameSense;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcLabel? @AxisTag 
		{ 
			get 
			{
				if(_activated) return _axisTag;
				Activate();
				return _axisTag;
			} 
			set
			{
				SetValue( v =>  _axisTag = v, _axisTag, value,  "AxisTag", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 2)]
		public IfcCurve @AxisCurve 
		{ 
			get 
			{
				if(_activated) return _axisCurve;
				Activate();
				return _axisCurve;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _axisCurve = v, _axisCurve, value,  "AxisCurve", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcBoolean @SameSense 
		{ 
			get 
			{
				if(_activated) return _sameSense;
				Activate();
				return _sameSense;
			} 
			set
			{
				SetValue( v =>  _sameSense = v, _sameSense, value,  "SameSense", 3);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("WAxes")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, 1, 4)]
		public IEnumerable<IfcGrid> @PartOfW 
		{ 
			get 
			{
				return Model.Instances.Where<IfcGrid>(e => e.WAxes != null &&  e.WAxes.Contains(this), "WAxes", this);
			} 
		}
		[InverseProperty("VAxes")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, 1, 5)]
		public IEnumerable<IfcGrid> @PartOfV 
		{ 
			get 
			{
				return Model.Instances.Where<IfcGrid>(e => e.VAxes != null &&  e.VAxes.Contains(this), "VAxes", this);
			} 
		}
		[InverseProperty("UAxes")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, 1, 6)]
		public IEnumerable<IfcGrid> @PartOfU 
		{ 
			get 
			{
				return Model.Instances.Where<IfcGrid>(e => e.UAxes != null &&  e.UAxes.Contains(this), "UAxes", this);
			} 
		}
		[InverseProperty("IntersectingAxes")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, -1, 7)]
		public IEnumerable<IfcVirtualGridIntersection> @HasIntersections 
		{ 
			get 
			{
				return Model.Instances.Where<IfcVirtualGridIntersection>(e => e.IntersectingAxes != null &&  e.IntersectingAxes.Contains(this), "IntersectingAxes", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_axisTag = value.StringVal;
					return;
				case 1: 
					_axisCurve = (IfcCurve)(value.EntityVal);
					return;
				case 2: 
					_sameSense = value.BooleanVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcGridAxis other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@AxisCurve != null)
					yield return @AxisCurve;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}