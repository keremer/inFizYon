// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ConstraintResource;
using Xbim.Ifc4.PropertyResource;
using Xbim.Ifc4.ExternalReferenceResource;
using Xbim.Ifc4.MeasureResource;
using Xbim.Ifc4.DateTimeResource;
using Xbim.Ifc4.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.CostResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcAppliedValue
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcAppliedValue : IPersistEntity, IfcMetricValueSelect, IfcObjectReferenceSelect, IfcResourceObjectSelect
	{
		IfcLabel? @Name { get;  set; }
		IfcText? @Description { get;  set; }
		IIfcAppliedValueSelect @AppliedValue { get;  set; }
		IIfcMeasureWithUnit @UnitBasis { get;  set; }
		IfcDate? @ApplicableDate { get;  set; }
		IfcDate? @FixedUntilDate { get;  set; }
		IfcLabel? @Category { get;  set; }
		IfcLabel? @Condition { get;  set; }
		IfcArithmeticOperatorEnum? @ArithmeticOperator { get;  set; }
		IEnumerable<IIfcAppliedValue> @Components { get; }
		IEnumerable<IIfcExternalReferenceRelationship> @HasExternalReference {  get; }
	
	}
}

namespace Xbim.Ifc4.CostResource
{
	[ExpressType("IfcAppliedValue", 79)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcAppliedValue : PersistEntity, IInstantiableEntity, IIfcAppliedValue, IContainsEntityReferences, IEquatable<@IfcAppliedValue>
	{
		#region IIfcAppliedValue explicit implementation
		IfcLabel? IIfcAppliedValue.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		IfcText? IIfcAppliedValue.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		IIfcAppliedValueSelect IIfcAppliedValue.AppliedValue { 
 
 
			get { return @AppliedValue; } 
			set { AppliedValue = value as IfcAppliedValueSelect;}
		}	
		IIfcMeasureWithUnit IIfcAppliedValue.UnitBasis { 
 
 
			get { return @UnitBasis; } 
			set { UnitBasis = value as IfcMeasureWithUnit;}
		}	
		IfcDate? IIfcAppliedValue.ApplicableDate { 
 
			get { return @ApplicableDate; } 
			set { ApplicableDate = value;}
		}	
		IfcDate? IIfcAppliedValue.FixedUntilDate { 
 
			get { return @FixedUntilDate; } 
			set { FixedUntilDate = value;}
		}	
		IfcLabel? IIfcAppliedValue.Category { 
 
			get { return @Category; } 
			set { Category = value;}
		}	
		IfcLabel? IIfcAppliedValue.Condition { 
 
			get { return @Condition; } 
			set { Condition = value;}
		}	
		IfcArithmeticOperatorEnum? IIfcAppliedValue.ArithmeticOperator { 
 
			get { return @ArithmeticOperator; } 
			set { ArithmeticOperator = value;}
		}	
		IEnumerable<IIfcAppliedValue> IIfcAppliedValue.Components { 
			get { return new Common.Collections.ProxyItemSet<IfcAppliedValue, IIfcAppliedValue>( @Components); } 
		}	
		 
		IEnumerable<IIfcExternalReferenceRelationship> IIfcAppliedValue.HasExternalReference {  get { return @HasExternalReference; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAppliedValue(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_components = new OptionalItemSet<IfcAppliedValue>( this, 0,  10);
		}

		#region Explicit attribute fields
		private IfcLabel? _name;
		private IfcText? _description;
		private IfcAppliedValueSelect _appliedValue;
		private IfcMeasureWithUnit _unitBasis;
		private IfcDate? _applicableDate;
		private IfcDate? _fixedUntilDate;
		private IfcLabel? _category;
		private IfcLabel? _condition;
		private IfcArithmeticOperatorEnum? _arithmeticOperator;
		private readonly OptionalItemSet<IfcAppliedValue> _components;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcLabel? @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 3)]
		public IfcAppliedValueSelect @AppliedValue 
		{ 
			get 
			{
				if(_activated) return _appliedValue;
				Activate();
				return _appliedValue;
			} 
			set
			{
				var entity = value as IPersistEntity;
				if (entity != null && !(ReferenceEquals(Model, entity.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _appliedValue = v, _appliedValue, value,  "AppliedValue", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 4)]
		public IfcMeasureWithUnit @UnitBasis 
		{ 
			get 
			{
				if(_activated) return _unitBasis;
				Activate();
				return _unitBasis;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _unitBasis = v, _unitBasis, value,  "UnitBasis", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 5)]
		public IfcDate? @ApplicableDate 
		{ 
			get 
			{
				if(_activated) return _applicableDate;
				Activate();
				return _applicableDate;
			} 
			set
			{
				SetValue( v =>  _applicableDate = v, _applicableDate, value,  "ApplicableDate", 5);
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 6)]
		public IfcDate? @FixedUntilDate 
		{ 
			get 
			{
				if(_activated) return _fixedUntilDate;
				Activate();
				return _fixedUntilDate;
			} 
			set
			{
				SetValue( v =>  _fixedUntilDate = v, _fixedUntilDate, value,  "FixedUntilDate", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 7)]
		public IfcLabel? @Category 
		{ 
			get 
			{
				if(_activated) return _category;
				Activate();
				return _category;
			} 
			set
			{
				SetValue( v =>  _category = v, _category, value,  "Category", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 8)]
		public IfcLabel? @Condition 
		{ 
			get 
			{
				if(_activated) return _condition;
				Activate();
				return _condition;
			} 
			set
			{
				SetValue( v =>  _condition = v, _condition, value,  "Condition", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 9)]
		public IfcArithmeticOperatorEnum? @ArithmeticOperator 
		{ 
			get 
			{
				if(_activated) return _arithmeticOperator;
				Activate();
				return _arithmeticOperator;
			} 
			set
			{
				SetValue( v =>  _arithmeticOperator = v, _arithmeticOperator, value,  "ArithmeticOperator", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.Class, 1, -1, 10)]
		public IOptionalItemSet<IfcAppliedValue> @Components 
		{ 
			get 
			{
				if(_activated) return _components;
				Activate();
				return _components;
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("RelatedResourceObjects")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, -1, 11)]
		public IEnumerable<IfcExternalReferenceRelationship> @HasExternalReference 
		{ 
			get 
			{
				return Model.Instances.Where<IfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this), "RelatedResourceObjects", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_name = value.StringVal;
					return;
				case 1: 
					_description = value.StringVal;
					return;
				case 2: 
					_appliedValue = (IfcAppliedValueSelect)(value.EntityVal);
					return;
				case 3: 
					_unitBasis = (IfcMeasureWithUnit)(value.EntityVal);
					return;
				case 4: 
					_applicableDate = value.StringVal;
					return;
				case 5: 
					_fixedUntilDate = value.StringVal;
					return;
				case 6: 
					_category = value.StringVal;
					return;
				case 7: 
					_condition = value.StringVal;
					return;
				case 8: 
                    _arithmeticOperator = (IfcArithmeticOperatorEnum) System.Enum.Parse(typeof (IfcArithmeticOperatorEnum), value.EnumVal, true);
					return;
				case 9: 
					_components.InternalAdd((IfcAppliedValue)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcAppliedValue other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@UnitBasis != null)
					yield return @UnitBasis;
				foreach(var entity in @Components)
					yield return entity;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}