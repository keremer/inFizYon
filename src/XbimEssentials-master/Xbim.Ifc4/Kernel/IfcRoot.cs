// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.UtilityResource;
using Xbim.Ifc4.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.Kernel;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcRoot
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcRoot : IPersistEntity
	{
		IfcGloballyUniqueId @GlobalId { get;  set; }
		IIfcOwnerHistory @OwnerHistory { get;  set; }
		IfcLabel? @Name { get;  set; }
		IfcText? @Description { get;  set; }
	
	}
}

namespace Xbim.Ifc4.Kernel
{
	[ExpressType("IfcRoot", 12)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcRoot : PersistEntity, IIfcRoot, IEquatable<@IfcRoot>
	{
		#region IIfcRoot explicit implementation
		IfcGloballyUniqueId IIfcRoot.GlobalId { 
 
			get { return @GlobalId; } 
			set { GlobalId = value;}
		}	
		IIfcOwnerHistory IIfcRoot.OwnerHistory { 
 
 
			get { return @OwnerHistory; } 
			set { OwnerHistory = value as IfcOwnerHistory;}
		}	
		IfcLabel? IIfcRoot.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		IfcText? IIfcRoot.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRoot(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcGloballyUniqueId _globalId;
		private IfcOwnerHistory _ownerHistory;
		private IfcLabel? _name;
		private IfcText? _description;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 1)]
		public IfcGloballyUniqueId @GlobalId 
		{ 
			get 
			{
				if(_activated) return _globalId;
				Activate();
				return _globalId;
			} 
			set
			{
				SetValue( v =>  _globalId = v, _globalId, value,  "GlobalId", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 2)]
		public IfcOwnerHistory @OwnerHistory 
		{ 
			get 
			{
				if(_activated) return _ownerHistory;
				Activate();
				return _ownerHistory;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _ownerHistory = v, _ownerHistory, value,  "OwnerHistory", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcLabel? @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 4)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 4);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_globalId = value.StringVal;
					return;
				case 1: 
					_ownerHistory = (IfcOwnerHistory)(value.EntityVal);
					return;
				case 2: 
					_name = value.StringVal;
					return;
				case 3: 
					_description = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcRoot other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}