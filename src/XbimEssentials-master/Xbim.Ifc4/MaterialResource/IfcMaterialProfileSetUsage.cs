// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.MaterialResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcMaterialProfileSetUsage
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcMaterialProfileSetUsage : IIfcMaterialUsageDefinition
	{
		IIfcMaterialProfileSet @ForProfileSet { get;  set; }
		IfcCardinalPointReference? @CardinalPoint { get;  set; }
		IfcPositiveLengthMeasure? @ReferenceExtent { get;  set; }
	
	}
}

namespace Xbim.Ifc4.MaterialResource
{
	[ExpressType("IfcMaterialProfileSetUsage", 1207)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcMaterialProfileSetUsage : IfcMaterialUsageDefinition, IInstantiableEntity, IIfcMaterialProfileSetUsage, IContainsEntityReferences, IEquatable<@IfcMaterialProfileSetUsage>
	{
		#region IIfcMaterialProfileSetUsage explicit implementation
		IIfcMaterialProfileSet IIfcMaterialProfileSetUsage.ForProfileSet { 
 
 
			get { return @ForProfileSet; } 
			set { ForProfileSet = value as IfcMaterialProfileSet;}
		}	
		IfcCardinalPointReference? IIfcMaterialProfileSetUsage.CardinalPoint { 
 
			get { return @CardinalPoint; } 
			set { CardinalPoint = value;}
		}	
		IfcPositiveLengthMeasure? IIfcMaterialProfileSetUsage.ReferenceExtent { 
 
			get { return @ReferenceExtent; } 
			set { ReferenceExtent = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcMaterialProfileSetUsage(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcMaterialProfileSet _forProfileSet;
		private IfcCardinalPointReference? _cardinalPoint;
		private IfcPositiveLengthMeasure? _referenceExtent;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 2)]
		public IfcMaterialProfileSet @ForProfileSet 
		{ 
			get 
			{
				if(_activated) return _forProfileSet;
				Activate();
				return _forProfileSet;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _forProfileSet = v, _forProfileSet, value,  "ForProfileSet", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcCardinalPointReference? @CardinalPoint 
		{ 
			get 
			{
				if(_activated) return _cardinalPoint;
				Activate();
				return _cardinalPoint;
			} 
			set
			{
				SetValue( v =>  _cardinalPoint = v, _cardinalPoint, value,  "CardinalPoint", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 4)]
		public IfcPositiveLengthMeasure? @ReferenceExtent 
		{ 
			get 
			{
				if(_activated) return _referenceExtent;
				Activate();
				return _referenceExtent;
			} 
			set
			{
				SetValue( v =>  _referenceExtent = v, _referenceExtent, value,  "ReferenceExtent", 3);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_forProfileSet = (IfcMaterialProfileSet)(value.EntityVal);
					return;
				case 1: 
					_cardinalPoint = value.IntegerVal;
					return;
				case 2: 
					_referenceExtent = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcMaterialProfileSetUsage other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@ForProfileSet != null)
					yield return @ForProfileSet;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}