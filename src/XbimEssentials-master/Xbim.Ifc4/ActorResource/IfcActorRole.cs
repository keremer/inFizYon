// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.ExternalReferenceResource;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.ActorResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcActorRole
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcActorRole : IPersistEntity, IfcResourceObjectSelect
	{
		IfcRoleEnum @Role { get;  set; }
		IfcLabel? @UserDefinedRole { get;  set; }
		IfcText? @Description { get;  set; }
		IEnumerable<IIfcExternalReferenceRelationship> @HasExternalReference {  get; }
	
	}
}

namespace Xbim.Ifc4.ActorResource
{
	[ExpressType("IfcActorRole", 595)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcActorRole : PersistEntity, IInstantiableEntity, IIfcActorRole, IEquatable<@IfcActorRole>
	{
		#region IIfcActorRole explicit implementation
		IfcRoleEnum IIfcActorRole.Role { 
 
			get { return @Role; } 
			set { Role = value;}
		}	
		IfcLabel? IIfcActorRole.UserDefinedRole { 
 
			get { return @UserDefinedRole; } 
			set { UserDefinedRole = value;}
		}	
		IfcText? IIfcActorRole.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		 
		IEnumerable<IIfcExternalReferenceRelationship> IIfcActorRole.HasExternalReference {  get { return @HasExternalReference; } }
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcActorRole(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcRoleEnum _role;
		private IfcLabel? _userDefinedRole;
		private IfcText? _description;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 1)]
		public IfcRoleEnum @Role 
		{ 
			get 
			{
				if(_activated) return _role;
				Activate();
				return _role;
			} 
			set
			{
				SetValue( v =>  _role = v, _role, value,  "Role", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 2)]
		public IfcLabel? @UserDefinedRole 
		{ 
			get 
			{
				if(_activated) return _userDefinedRole;
				Activate();
				return _userDefinedRole;
			} 
			set
			{
				SetValue( v =>  _userDefinedRole = v, _userDefinedRole, value,  "UserDefinedRole", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 3)]
		public IfcText? @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 3);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("RelatedResourceObjects")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 0, -1, 4)]
		public IEnumerable<IfcExternalReferenceRelationship> @HasExternalReference 
		{ 
			get 
			{
				return Model.Instances.Where<IfcExternalReferenceRelationship>(e => e.RelatedResourceObjects != null &&  e.RelatedResourceObjects.Contains(this), "RelatedResourceObjects", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
                    _role = (IfcRoleEnum) System.Enum.Parse(typeof (IfcRoleEnum), value.EnumVal, true);
					return;
				case 1: 
					_userDefinedRole = value.StringVal;
					return;
				case 2: 
					_description = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcActorRole other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}