// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.GeometricModelResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcTriangulatedFaceSet
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcTriangulatedFaceSet : IIfcTessellatedFaceSet
	{
		IItemSet<IItemSet<IfcPositiveInteger>> @CoordIndex { get; }
		IItemSet<IItemSet<IfcPositiveInteger>> @NormalIndex { get; }
		IfcInteger @NumberOfTriangles  { get ; }
	
	}
}

namespace Xbim.Ifc4.GeometricModelResource
{
	[ExpressType("IfcTriangulatedFaceSet", 1304)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcTriangulatedFaceSet : IfcTessellatedFaceSet, IInstantiableEntity, IIfcTriangulatedFaceSet, IContainsEntityReferences, IEquatable<@IfcTriangulatedFaceSet>
	{
		#region IIfcTriangulatedFaceSet explicit implementation
		IItemSet<IItemSet<IfcPositiveInteger>> IIfcTriangulatedFaceSet.CoordIndex { 
			get { return @CoordIndex; } 
		}	
		IItemSet<IItemSet<IfcPositiveInteger>> IIfcTriangulatedFaceSet.NormalIndex { 
			get { return @NormalIndex; } 
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcTriangulatedFaceSet(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_coordIndex = new ItemSet<IItemSet<IfcPositiveInteger>>( this, 0,  4);
			_normalIndex = new OptionalItemSet<IItemSet<IfcPositiveInteger>>( this, 0,  5);
		}

		#region Explicit attribute fields
		private readonly ItemSet<IItemSet<IfcPositiveInteger>> _coordIndex;
		private readonly OptionalItemSet<IItemSet<IfcPositiveInteger>> _normalIndex;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.List, EntityAttributeType.List, 3, 3, 8)]
		public IItemSet<IItemSet<IfcPositiveInteger>> @CoordIndex 
		{ 
			get 
			{
				if(_activated) return _coordIndex;
				Activate();
				return _coordIndex;
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.List, EntityAttributeType.List, 3, 3, 9)]
		public IOptionalItemSet<IItemSet<IfcPositiveInteger>> @NormalIndex 
		{ 
			get 
			{
				if(_activated) return _normalIndex;
				Activate();
				return _normalIndex;
			} 
		}	
		#endregion


		#region Derived attributes
		[EntityAttribute(0, EntityAttributeState.Derived, EntityAttributeType.None, EntityAttributeType.None, -1, -1, 0)]
		public IfcInteger @NumberOfTriangles 
		{
			get 
			{
				//## Getter for NumberOfTriangles
			    return CoordIndex.Count;
			    //##
			}
		}

		#endregion


		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 3: 
					((ItemSet<IfcPositiveInteger>)_coordIndex
						.InternalGetAt(nestedIndex[0]) )
						.InternalAdd((IfcPositiveInteger)(value.IntegerVal));
					return;
				case 4: 
					((ItemSet<IfcPositiveInteger>)_normalIndex
						.InternalGetAt(nestedIndex[0]) )
						.InternalAdd((IfcPositiveInteger)(value.IntegerVal));
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcTriangulatedFaceSet other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Coordinates != null)
					yield return @Coordinates;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}