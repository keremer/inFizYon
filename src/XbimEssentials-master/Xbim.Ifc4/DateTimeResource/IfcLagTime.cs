// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.DateTimeResource;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcLagTime
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcLagTime : IIfcSchedulingTime
	{
		IIfcTimeOrRatioSelect @LagValue { get;  set; }
		IfcTaskDurationEnum @DurationType { get;  set; }
	
	}
}

namespace Xbim.Ifc4.DateTimeResource
{
	[ExpressType("IfcLagTime", 1197)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcLagTime : IfcSchedulingTime, IInstantiableEntity, IIfcLagTime, IEquatable<@IfcLagTime>
	{
		#region IIfcLagTime explicit implementation
		IIfcTimeOrRatioSelect IIfcLagTime.LagValue { 
 
 
			get { return @LagValue; } 
			set { LagValue = value as IfcTimeOrRatioSelect;}
		}	
		IfcTaskDurationEnum IIfcLagTime.DurationType { 
 
			get { return @DurationType; } 
			set { DurationType = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcLagTime(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcTimeOrRatioSelect _lagValue;
		private IfcTaskDurationEnum _durationType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 4)]
		public IfcTimeOrRatioSelect @LagValue 
		{ 
			get 
			{
				if(_activated) return _lagValue;
				Activate();
				return _lagValue;
			} 
			set
			{
				SetValue( v =>  _lagValue = v, _lagValue, value,  "LagValue", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.Enum, EntityAttributeType.None, -1, -1, 5)]
		public IfcTaskDurationEnum @DurationType 
		{ 
			get 
			{
				if(_activated) return _durationType;
				Activate();
				return _durationType;
			} 
			set
			{
				SetValue( v =>  _durationType = v, _durationType, value,  "DurationType", 5);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 3: 
					_lagValue = (IfcTimeOrRatioSelect)(value.EntityVal);
					return;
				case 4: 
                    _durationType = (IfcTaskDurationEnum) System.Enum.Parse(typeof (IfcTaskDurationEnum), value.EnumVal, true);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcLagTime other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}