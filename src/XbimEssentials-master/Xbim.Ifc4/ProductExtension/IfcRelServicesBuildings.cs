// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Kernel;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.ProductExtension;
//## Custom using statements
//##

namespace Xbim.Ifc4.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcRelServicesBuildings
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcRelServicesBuildings : IIfcRelConnects
	{
		IIfcSystem @RelatingSystem { get;  set; }
		IItemSet<IIfcSpatialElement> @RelatedBuildings { get; }
	
	}
}

namespace Xbim.Ifc4.ProductExtension
{
	[ExpressType("IfcRelServicesBuildings", 600)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcRelServicesBuildings : IfcRelConnects, IInstantiableEntity, IIfcRelServicesBuildings, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@IfcRelServicesBuildings>
	{
		#region IIfcRelServicesBuildings explicit implementation
		IIfcSystem IIfcRelServicesBuildings.RelatingSystem { 
 
 
			get { return @RelatingSystem; } 
			set { RelatingSystem = value as IfcSystem;}
		}	
		IItemSet<IIfcSpatialElement> IIfcRelServicesBuildings.RelatedBuildings { 
			get { return new Common.Collections.ProxyItemSet<IfcSpatialElement, IIfcSpatialElement>( @RelatedBuildings); } 
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcRelServicesBuildings(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_relatedBuildings = new ItemSet<IfcSpatialElement>( this, 0,  6);
		}

		#region Explicit attribute fields
		private IfcSystem _relatingSystem;
		private readonly ItemSet<IfcSpatialElement> _relatedBuildings;
		#endregion
	
		#region Explicit attribute properties
		[IndexedProperty]
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, -1, -1, 5)]
		public IfcSystem @RelatingSystem 
		{ 
			get 
			{
				if(_activated) return _relatingSystem;
				Activate();
				return _relatingSystem;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _relatingSystem = v, _relatingSystem, value,  "RelatingSystem", 5);
			} 
		}	
		[IndexedProperty]
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, 1, -1, 6)]
		public IItemSet<IfcSpatialElement> @RelatedBuildings 
		{ 
			get 
			{
				if(_activated) return _relatedBuildings;
				Activate();
				return _relatedBuildings;
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 4: 
					_relatingSystem = (IfcSystem)(value.EntityVal);
					return;
				case 5: 
					_relatedBuildings.InternalAdd((IfcSpatialElement)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcRelServicesBuildings other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@OwnerHistory != null)
					yield return @OwnerHistory;
				if (@RelatingSystem != null)
					yield return @RelatingSystem;
				foreach(var entity in @RelatedBuildings)
					yield return entity;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				if (@RelatingSystem != null)
					yield return @RelatingSystem;
				foreach(var entity in @RelatedBuildings)
					yield return entity;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}